#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#include "src/hardware/encoder.h"
#include "src/hardware/pins.h"
#include "src/soft/dispatcher.h"
#include "src/hardware/thermistor.h"
#include "src/soft/menu.h"
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <StreamString.h>

#ifndef APSSID
#define APSSID "ESPap"
#define APPSK "thereisnospoon"
#endif

LiquidCrystal_I2C lcd(0x27, 20, 4);
Encoder encoder(5, 6, 7, false, false, false, true);
Dispatcher dispatcher(3);
Thermistor thermistor_inisde(A0);
Thermistor thermistor_outside(A1);

MenuNode root_menu("root_menu", 3);
MenuNode sub1("Sub 1", 0);
MenuNode sub2("Sub 2", 3);
BackNode back_sub2 = *new BackNode();
MenuNode sub2_1("Sub 1", 0);
MenuNode sub2_2("Sub 2", 0);

int8_t temp = 100;
IntValueNode temperature(&temp, "Temp.");
Menu menu(&root_menu);

void update_screen() {
  if (encoder.isRightTurn()) menu.cursorUp();
  else if (encoder.isLeftTurn()) menu.cursorDown();
  if (encoder.button->isPressed()) menu.enterNode();
}

Task update_screen_task(update_screen, "update_screen", 100);

const char *ssid = APSSID;
const char *password = APPSK;
ESP8266WebServer server(80);

void handleRoot() {
  String html_page  = "";
  html_page += "<!DOCTYPE html"
html_page += "<html lang="ru""
html_page += "<head"
html_page += "    <meta charset="UTF-8""
html_page += "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\""
html_page += "    <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ url_for('static', filename='styles.css') }}\""
html_page += "    <title>РђРІС‚РѕРјР°С‚РёР·РёСЂРѕРІР°РЅРЅР°СЏ РљРѕРїС‚РёР»СЊРЅР°СЏ РљР°РјРµСЂР°</title"
html_page += "</head"
html_page += "<style"
html_page += "    body "
html_page += "    font-family: Arial, sans-serif"
html_page += "    background-color: #f5f5f5"
html_page += "    margin: 0"
html_page += "    padding: 20px"
html_page += "    display: flex"
html_page += "    flex-direction: column"
html_page += "    align-items: center"
html_page += ""
html_page += ""
html_page += ".container "
html_page += "    display: flex"
html_page += "    flex-wrap: wrap"
html_page += "    justify-content: center"
html_page += "    gap: 10px"
html_page += "    max-width: 1200px"
html_page += "    width: 100%"
html_page += ""
html_page += ""
html_page += ".box "
html_page += "    background-color: white"
html_page += "    border: 1px solid #ccc"
html_page += "    border-radius: 8px"
html_page += "    padding: 20px"
html_page += "    margin: 5px"
html_page += "    width: 200px"
html_page += "    height: 200px"
html_page += "    box-shadow: 0 4px 8px rgba(0,0,0,0.1)"
html_page += "    display: flex"
html_page += "    flex-direction: column"
html_page += "    justify-content: center"
html_page += "    align-items: center"
html_page += ""
html_page += ""
html_page += ".box h2 "
html_page += "    margin-top: 0"
html_page += "    font-size: 18px"
html_page += "    text-align: center"
html_page += ""
html_page += ""
html_page += ".status "
html_page += "    padding: 10px"
html_page += "    border-radius: 8px"
html_page += "    color: white"
html_page += "    font-weight: bold"
html_page += "    text-align: center"
html_page += "    margin-top: 10px"
html_page += "    width: 80%"
html_page += ""
html_page += ""
html_page += ".status.on "
html_page += "    background-color: green"
html_page += ""
html_page += ""
html_page += ".status.off "
html_page += "    background-color: red"
html_page += ""
html_page += ""
html_page += ".temperature-box "
html_page += "    background-color: white"
html_page += "    border: 1px solid #ccc"
html_page += "    border-radius: 8px"
html_page += "    padding: 20px"
html_page += "    margin: 5px"
html_page += "    width: 400px"
html_page += "    height: 200px"
html_page += "    box-shadow: 0 4px 8px rgba(0,0,0,0.1)"
html_page += "    display: flex"
html_page += "    flex-direction: column"
html_page += "    justify-content: center"
html_page += "    align-items: center"
html_page += ""
html_page += ""
html_page += ".temperature-box h2 "
html_page += "    margin-top: 0"
html_page += "    font-size: 18px"
html_page += "    text-align: center"
html_page += ""
html_page += ""
html_page += ".temperature "
html_page += "    display: flex"
html_page += "    flex-direction: column"
html_page += "    align-items: center"
html_page += "    gap: 10px"
html_page += "    width: 80%"
html_page += ""
html_page += ""
html_page += ".temperature-bar "
html_page += "    width: 100%"
html_page += "    height: 20px"
html_page += "    background-color: #ccc"
html_page += "    border-radius: 8px"
html_page += "    overflow: hidden"
html_page += "    position: relative"
html_page += ""
html_page += ""
html_page += ".temperature-bar span "
html_page += "    display: block"
html_page += "    height: 100%"
html_page += "    background-color: #ffc400"
html_page += "    border-radius: 8px"
html_page += "    position: absolute"
html_page += "    top: 0"
html_page += "    left: 0"
html_page += ""
html_page += ""
html_page += ".temperature-label "
html_page += "    position: absolute"
html_page += "    right: 10px"
html_page += "    top: 50%"
html_page += "    transform: translateY(-50%)"
html_page += "    color: white"
html_page += "    font-weight: bold"
html_page += ""
html_page += ""
html_page += ".button-container "
html_page += "    margin: 20px"
html_page += ""
html_page += ""
html_page += "button "
html_page += "    padding: 10px 20px"
html_page += "    border: none"
html_page += "    border-radius: 8px"
html_page += "    background-color: #4caf50"
html_page += "    color: white"
html_page += "    font-size: 16px"
html_page += "    cursor: pointer"
html_page += "    margin: 10px"
html_page += ""
html_page += ""
html_page += "button:hover "
html_page += "    background-color: #45a049"
html_page += ""
html_page += ""
html_page += "@media (max-width: 600px) "
html_page += "    .box "
html_page += "        width: 100%"
html_page += "        height: auto"
html_page += "        margin: 10px 0"
html_page += "    "
html_page += "    .status "
html_page += "        width: 100%"
html_page += "    "
html_page += "    .temperature-box "
html_page += "        width: 100%"
html_page += "        height: auto"
html_page += "        margin: 10px 0"
html_page += "    "
html_page += "    .temperature "
html_page += "        width: 100%"
html_page += "    "
html_page += ""
html_page += "</style"
html_page += ""
html_page += "<body"
html_page += "    <h1>РђРІС‚РѕРјР°С‚РёР·РёСЂРѕРІР°РЅРЅР°СЏ РљРѕРїС‚РёР»СЊРЅР°СЏ РљР°РјРµСЂР°</h1"
html_page += "    <div class=\"temperature-box\""
html_page += "        <h2>РўРµРјРїРµСЂР°С‚СѓСЂР°</h2"
html_page += "        <div class=\"temperature\""
html_page += "            <div class=\"temperature-bar\""
html_page += "                <span id=\"temp_tk_bar\" style=\"width: 0%;\"></span"
html_page += "                <div class=\"temperature-label\" id=\"temp_tk_label\">Р—Р°РіСЂСѓР·РєР°...</div"
html_page += "            </div>       "
html_page += "            <div class=\"temperature-bar\""
html_page += "                <span id=\"temp_ti_bar\" style=\"width: 0%;\"></span"
html_page += "                <div class=\"temperature-label\" id=\"temp_ti_label\">Р—Р°РіСЂСѓР·РєР°...</div"
html_page += "            </div>                "
html_page += "        </div"
html_page += "    </div"
html_page += "    <div class=\"container\""
html_page += "        <div class=\"box\""
html_page += "            <h2>Р—Р°СЃР»РѕРЅРєР° РІС…РѕРґРЅРѕР№ С‚СЂСѓР±С‹ (Р—РІС…)</h2"
html_page += "            <p id=\"valve_in\" class=\"status off\">Р—Р°РіСЂСѓР·РєР°...</p"
html_page += "        </div"
html_page += "        <div class=\"box\""
html_page += "            <h2>Р—Р°СЃР»РѕРЅРєР° РґС‹РјРѕРіРµРЅРµСЂР°С‚РѕСЂР° (Р—РґРі)</h2"
html_page += "            <p id=\"valve_dg\" class=\"status off\">Р—Р°РіСЂСѓР·РєР°...</p"
html_page += "        </div"
html_page += "        <div class=\"box\""
html_page += "            <h2>РџР°СЂРѕРіРµРЅРµСЂР°С‚РѕСЂ (РџР“)</h2"
html_page += "            <p id=\"steam_generator\" class=\"status off\">Р—Р°РіСЂСѓР·РєР°...</p"
html_page += "        </div"
html_page += "        <div class=\"box\""
html_page += "            <h2>Р’РµРЅС‚РёР»СЏС‚РѕСЂ С‚РµСЂРјРѕРєР°РјРµСЂС‹ (Р’РўРљ)</h2"
html_page += "            <p id=\"fan_tk\" class=\"status off\">Р—Р°РіСЂСѓР·РєР°...</p"
html_page += "        </div"
html_page += "        <div class=\"box\""
html_page += "            <h2>Р—Р°СЃР»РѕРЅРєР° РІС‹С…РѕРґРЅРѕР№ С‚СЂСѓР±С‹ (Р—РІС‹С…)</h2"
html_page += "            <p id=\"valve_out\" class=\"status off\">Р—Р°РіСЂСѓР·РєР°...</p"
html_page += "        </div"
html_page += "        <div class=\"box\""
html_page += "            <h2>Р”С‹РјРѕРіРµРЅРµСЂР°С‚РѕСЂ (Р”Р“)</h2"
html_page += "            <p id=\"smoke_generator\" class=\"status off\">Р—Р°РіСЂСѓР·РєР°...</p"
html_page += "        </div"
html_page += "        <div class=\"box\""
html_page += "            <h2>Р’РµРЅС‚РёР»СЏС‚РѕСЂ РґС‹РјРѕРіРµРЅРµСЂР°С‚РѕСЂР° (Р’Р”Р“)</h2"
html_page += "            <p id=\"fan_dg\" class=\"status off\">Р—Р°РіСЂСѓР·РєР°...</p"
html_page += "        </div"
html_page += "    </div"
html_page += "    <div class=\"button-container\""
html_page += "        <button onclick=\"fetchDataAndUpdate()\">РћР±РЅРѕРІРёС‚СЊ РґР°РЅРЅС‹Рµ</button"
html_page += "        <form id=\"uploadForm\""
html_page += "            <button type=\"button\" onclick=\"uploadFile()\">РћС‚РїСЂР°РІРёС‚СЊ С„Р°Р№Р» РєРѕРЅС„РёРіСѓСЂР°С†РёРё</button"
html_page += "            <input type=\"file\" id=\"fileInput\" accept=\".json\""
html_page += "        </form"
html_page += "    </div"
html_page += "   "
html_page += "    <script"
html_page += ""
html_page += "        // Р¤СѓРЅРєС†РёСЏ РѕР±РЅРѕРІР»РµРЅРёСЏ СЃС‚Р°С‚СѓСЃР° Р·Р°СЃР»РѕРЅРєР"
html_page += "        function updateValveStatus(elementId, status) "
html_page += "            const element = document.getElementById(elementId)"
html_page += "            if (status === 'РћС‚РєСЂС‹С‚Р°') "
html_page += "                element.classList.add('on')"
html_page += "                element.classList.remove('off')"
html_page += "                element.textContent = 'РћС‚РєСЂС‹С‚Р°'"
html_page += "            } else "
html_page += "                element.classList.add('off')"
html_page += "                element.classList.remove('on')"
html_page += "                element.textContent = 'Р—Р°РєСЂС‹С‚Р°'"
html_page += "            "
html_page += "        "
html_page += ""
html_page += "        // Р¤СѓРЅРєС†РёСЏ РѕР±РЅРѕРІР»РµРЅРёСЏ СЃС‚Р°С‚СѓСЃР° РІРµРЅС‚РёР»СЏС‚РѕСЂР° РёР»Рё РіРµРЅРµСЂР°С‚РѕСЂР"
html_page += "        function updateStatus(elementId, isActive) "
html_page += "            const element = document.getElementById(elementId)"
html_page += "            if (isActive) "
html_page += "                element.classList.add('on')"
html_page += "                element.classList.remove('off')"
html_page += "                element.textContent = 'Р’РєР»СЋС‡РµРЅ'"
html_page += "            } else "
html_page += "                element.classList.add('off')"
html_page += "                element.classList.remove('on')"
html_page += "                element.textContent = 'Р’С‹РєР»СЋС‡РµРЅ'"
html_page += "            "
html_page += "        "
html_page += "       "
html_page += "        function uploadFile() "
html_page += "            const fileInput = document.getElementById('fileInput')"
html_page += "            const file = fileInput.files[0]"
html_page += ""
html_page += "            if (!file) "
html_page += "                console.error('Р¤Р°Р№Р» РЅРµ РІС‹Р±СЂР°РЅ')"
html_page += "                return"
html_page += "            "
html_page += ""
html_page += "            const formData = new FormData()"
html_page += "            formData.append('configFile', file)"
html_page += ""
html_page += "            fetch('/upload', "
html_page += "                method: 'POST'"
html_page += "                body: formDat"
html_page += "            }"
html_page += "            .then(response => "
html_page += "                if (!response.ok) "
html_page += "                    throw new Error('РћС€РёР±РєР° РїСЂРё Р·Р°РіСЂСѓР·РєРµ С„Р°Р№Р»Р°')"
html_page += "                "
html_page += "                return response.json()"
html_page += "            }"
html_page += "            .then(data => "
html_page += "                console.log('Р¤Р°Р№Р» СѓСЃРїРµС€РЅРѕ Р·Р°РіСЂСѓР¶РµРЅ:', data)"
html_page += "            }"
html_page += "            .catch(error => "
html_page += "                console.error('РћС€РёР±РєР°:', error)"
html_page += "            })"
html_page += "        "
html_page += "       "
html_page += "        // Р¤СѓРЅРєС†РёСЏ РґР»СЏ РїРѕР»СѓС‡РµРЅРёСЏ РґР°РЅРЅС‹С… СЃ СЃРµСЂРІРµСЂР° Рё РѕР±РЅРѕРІР»РµРЅРёСЏ РёРЅС„РѕСЂРјР°С†РёРё РЅР° СЃС‚СЂР°РЅРёС†Р"
html_page += "        function fetchDataAndUpdate() "
html_page += "            fetch('/api/data') // Р—РґРµСЃСЊ СѓРєР°Р·С‹РІР°РµС‚СЃСЏ URL РІР°С€РµРіРѕ Flask REST AP"
html_page += "            .then(response => "
html_page += "                if (!response.ok) "
html_page += "                    throw new Error('РћС€РёР±РєР° РїСЂРё Р·Р°РїСЂРѕСЃРµ')"
html_page += "                "
html_page += "                return response.json()"
html_page += "            }"
html_page += "            .then(data => "
html_page += "                console.log('Р”Р°РЅРЅС‹Рµ РїРѕР»СѓС‡РµРЅС‹:', data)"
html_page += "                // РћР±РЅРѕРІР»РµРЅРёРµ РёРЅС„РѕСЂРјР°С†РёРё РЅР° СЃС‚СЂР°РЅРёС†Рµ РЅР° РѕСЃРЅРѕРІРµ РїРѕР»СѓС‡РµРЅРЅС‹С… РґР°РЅРЅС‹С"
html_page += "                // РќР°РїСЂРёРјРµСЂ, РѕР±РЅРѕРІР»РµРЅРёРµ С‚РµРєСЃС‚Р°, РёР·РјРµРЅРµРЅРёРµ СЃС‚РёР»РµР№ Рё С‚.Рґ"
html_page += ""
html_page += "                // РћР±РЅРѕРІР»РµРЅРёРµ С‚РµРјРїРµСЂР°С‚СѓС"
html_page += "                const tempTk = data.temp_tk"
html_page += "                const tempTi = data.temp_ti"
html_page += "                document.getElementById('temp_tk_bar').style.width = `${tempTk}%`"
html_page += "                document.getElementById('temp_tk_label').textContent = `${tempTk} В°C`"
html_page += "                document.getElementById('temp_ti_bar').style.width = `${tempTi}%`"
html_page += "                document.getElementById('temp_ti_label').textContent = `${tempTi} В°C`"
html_page += ""
html_page += "                // РћР±РЅРѕРІР»РµРЅРёРµ СЃРѕСЃС‚РѕСЏРЅРёСЏ Р·Р°СЃР»РѕРЅРѕРє Рё РІРµРЅС‚РёР»СЏС‚РѕСЂРѕР"
html_page += "                updateValveStatus('valve_in', data.valve_in)"
html_page += "                updateValveStatus('valve_out', data.valve_out)"
html_page += "                updateValveStatus('valve_dg', data.valve_dg)"
html_page += "                updateStatus('smoke_generator', data.smoke_generator === 'Р’РєР»СЋС‡РµРЅ')"
html_page += "                updateStatus('steam_generator', data.steam_generator === 'Р’РєР»СЋС‡РµРЅ')"
html_page += "                updateStatus('fan_dg', data.fan_dg === 'Р’РєР»СЋС‡РµРЅ')"
html_page += "                updateStatus('fan_tk', data.fan_tk === 'Р’РєР»СЋС‡РµРЅ')"
html_page += "            }"
html_page += "            .catch(error => "
html_page += "                console.error('РћС€РёР±РєР°:', error)"
html_page += "            })"
html_page += "        "
html_page += ""
html_page += "        // Р’С‹Р·С‹РІР°РµРј С„СѓРЅРєС†РёСЋ fetchDataAndUpdate() СЃСЂР°Р·Сѓ РїСЂРё Р·Р°РіСЂСѓР·РєРµ СЃС‚СЂР°РЅРёС†С"
html_page += "        fetchDataAndUpdate()"
html_page += "        // РЈСЃС‚Р°РЅР°РІР»РёРІР°РµРј РёРЅС‚РµСЂРІР°Р» РѕР±РЅРѕРІР»РµРЅРёСЏ РєР°Р¶РґСѓСЋ РјРёРЅСѓС‚Сѓ (РІ РјРёР»Р»РёСЃРµРєСѓРЅРґР°С…"
html_page += "        setInterval(fetchDataAndUpdate, 60000)"
html_page += "        // Р’С‹Р·РѕРІ С„СѓРЅРєС†РёРё РѕР±РЅРѕРІР»РµРЅРёСЏ РґР°РЅРЅС‹С… РїСЂРё Р·Р°РіСЂСѓР·РєРµ СЃС‚СЂР°РЅРёС†С"
html_page += "    </script"
html_page += "</body"
html_page += "</html"
  server.send(200, "text/html", html_page);
}

void setup() {
  lcd.init();
  lcd.init();
  lcd.backlight();
  Serial.begin(9600);

  Menu::addScreen(&lcd);
  root_menu.addChild(&sub1);
  root_menu.addChild(&sub2);
  root_menu.addChild(&temperature);
  sub2.addChild(&back_sub2);
  sub2.addChild(&sub2_1);
  sub2.addChild(&sub2_2);

  dispatcher.add_ticker(&encoder);
  dispatcher.add_ticker(&thermistor_inisde);
  dispatcher.add_ticker(&thermistor_outside);

  dispatcher.add(update_screen_task);
  dispatcher.enable_all();

  menu.drawChilds();
  WiFi.softAP(ssid, password);
  server.on("/", HTTP_GET, handleRoot);
  server.begin();
}


void loop(){
  dispatcher.tick();
  server.handleClient();
}